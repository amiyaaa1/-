# Chrome 沙箱项目

本项目提供一个可视化的前端控制台，用于批量创建隔离的 Chrome/Chromium 沙箱，自动执行谷歌登录、识别站点的谷歌登录选项并在完成后导出 Cookie。

## 功能概述

- 前端页面集中配置目标数量、默认打开链接与自动化选项。
- 支持一次性批量录入谷歌账号（邮箱-密码-辅助邮箱），自动分配给每个沙箱。
- 可选执行谷歌登录以及在目标站点尝试使用谷歌账号登录。
- 每个沙箱使用独立的浏览器用户目录，实现数据完全隔离。
- 登录完成后自动抓取 Cookie，按“邮箱-域名.txt”命名下载。
- 前端可查看沙箱状态、日志、下载 Cookie 并删除沙箱。

## 目录结构

```
app/
  main.py                # FastAPI 入口，暴露后端接口
  sandbox_manager.py     # 沙箱生命周期与自动化逻辑
  utils.py               # 工具函数（账号解析等）
  static/                # 前端静态页面、脚本和样式
cookies/                 # 自动生成的 Cookie 文本（运行时创建）
sandboxes/               # 浏览器沙箱用户目录（运行时创建）
requirements.txt         # Python 依赖
readme                   # 当前文档
```

## Windows 部署与使用指南

### 1. 环境准备

1. 安装 [Python 3.11](https://www.python.org/downloads/) 及以上版本，安装时勾选“Add Python to PATH”。
2. 安装最新版 [Google Chrome](https://www.google.cn/chrome/)（或准备 Chromium 便携版），确保可以正常启动浏览器。
   - 如无法安装到系统目录，可下载便携版本，并在启动项目前设置环境变量 `CHROME_BINARY=浏览器可执行文件路径`。
3. 打开 PowerShell 或命令提示符，执行以下步骤：

```powershell
# 克隆或下载本项目后进入项目目录
cd 路径\到\项目

# 建议使用虚拟环境
python -m venv .venv
.\.venv\Scripts\activate

# 安装依赖（包含 Selenium、webdriver-manager 等）
pip install -r requirements.txt
```

首次运行时，`webdriver-manager` 会自动下载匹配当前 Chrome 版本的驱动。如果网络受限，可手动从 <https://chromedriver.chromium.org/downloads> 下载驱动，并将其放在 `PATH` 目录中。

### 2. 启动项目

```powershell
# 激活虚拟环境后执行
uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
```

启动成功后，访问 <http://127.0.0.1:8000> 即可看到前端控制台。

### 3. 创建沙箱

1. **沙箱数量**：输入需要同时创建的浏览器数目。
2. **默认打开链接**：每个沙箱完成登录后跳转的目标 URL。
3. **启用谷歌账号自动登录**：勾选后会在沙箱启动时先访问 `accounts.google.com` 自动登录。
4. **尝试在目标网站使用谷歌账号登录**：勾选后，系统会自动寻找页面中的“Login/Sign in/注册/谷歌登录”等按钮并执行点击。
5. **谷歌账号列表**：粘贴账号文本，支持 `邮箱-密码-辅助邮箱`、`邮箱;密码;辅助邮箱`、`邮箱 密码 辅助邮箱` 等格式，每行一个账号。
6. 点击“创建沙箱”开始执行。

创建后可在下方列表看到每个沙箱的状态与日志，完成后会在 `cookies/` 目录生成 `邮箱-域名.txt` 文件，并可在页面直接下载。

### 4. 删除沙箱

点击“删除”按钮即可关闭并清理对应沙箱的数据目录。

## 已知限制

- 谷歌登录可能因验证码、二次验证或异常活动检测而失败，此时需要人工处理。
- 某些网站的登录流程较为复杂，自动识别 Google 登录入口可能无法覆盖所有情况。
- 运行在无图形界面的服务器上时，浏览器以 headless 模式运行；如需可视化界面需配置图形环境。

## 常见问题

- **登录失败怎么办？** 可在“查看日志”了解失败步骤，必要时关闭自动登录并手动处理。
- **Cookie 保存在哪里？** `cookies` 目录下，每个文件对应一个邮箱与站点域名。
- **如何自定义浏览器参数？** 可在 `app/sandbox_manager.py` 的 `_launch_driver` 方法中调整 Chrome 启动参数或指定便携版浏览器路径。

欢迎根据业务需求二次开发。若遇到问题，可查看日志或在 `SandboxManager` 中增加调试信息。
